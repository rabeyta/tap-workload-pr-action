name: TAP PR

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
env:
  WORKLOAD_NAMESPACE: demos

jobs:
  build:
    if: github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Get repository name
      run: echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d / -f 2)" >> $GITHUB_ENV
    - name: install-kubectl
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}
    - name: Install ytt
      uses: carvel-dev/setup-action@v2.0.0
      with:
        only: ytt
        ytt: v0.47.0
    - name: build and deploy workload template
      run: |
        workloadYaml=$(ytt -f $GITHUB_WORKSPACE/config/pr-workload-template.yaml \
        --data-value-yaml name=${{ env.REPO_NAME}} \
        --data-value-yaml namespace=${{ env.WORKLOAD_NAMESPACE }} \
        --data-value-yaml pr=${{ github.event.pull_request.number }} \
        --data-value-yaml shortSha=$(git rev-parse --short ${{ github.event.pull_request.head.sha }}) \
        --data-value-yaml sha=${{ github.event.pull_request.head.sha }} \
        --data-value-yaml branch=${{ github.head_ref }} \
        --data-value-yaml repo=${{ github.repository }})
        echo "$workloadYaml" 
        echo "$workloadYaml" | kubectl apply -f-
    - name: Get workload name
      run: echo "FORMATTED_WORKLOAD_NAME=${{ env.REPO_NAME }}-pr-${{ github.event.pull_request.number }}-$(git rev-parse --short ${{ github.event.pull_request.head.sha }})" >> $GITHUB_ENV
    - name: check test status
      timeout-minutes: 10
      run: |
        while true; do
          resources=$(kubectl -n ${{ env.WORKLOAD_NAMESPACE }} get workload ${{ env.FORMATTED_WORKLOAD_NAME }} -o jsonpath='{.status.resources}')
          if [ $? -ne 0 ]; then
            echo "::error::Failed to get resources, retrying in 15s..."
            sleep 15
            continue
          fi

          sourceTesterConditions=$(echo "$resources" | jq -c '[.[] | select(.name == "source-tester").conditions[] | select(.type == "Healthy")]')

          for condition in $(echo "${sourceTesterConditions}" | jq -c '.[]'); do
            status=$(echo "$condition" | jq -r '.status')
            message=$(echo "$condition" | jq -r '.message')
            echo "::debug::$message"

            if [[ $status == "True" ]]; then
              echo "::notice::Tests completed successfully."
              exit 0
            elif [[ $status == "False" ]]; then
              echo "::error::Tests failed."
              exit 1
            fi
          done

          sleep 15
        done
    - name: check build status
      timeout-minutes: 15
      run: |
        while true; do
          resources=$(kubectl -n ${{ env.WORKLOAD_NAMESPACE }} get workload ${{ env.FORMATTED_WORKLOAD_NAME }} -o jsonpath='{.status.resources}')
          if [ $? -ne 0 ]; then
            echo "::error::Failed to get resources, retrying in 15s..."
            sleep 15
            continue
          fi

          imageProviderConditions=$(echo "$resources" | jq -c '[.[] | select(.name == "image-provider").conditions[] | select(.type == "Healthy")]')

          for condition in $(echo "${imageProviderConditions}" | jq -c '.[]'); do
            status=$(echo "$condition" | jq -r '.status')
            message=$(echo "$condition" | jq -r '.message')
            echo "::debug::$message"

            if [[ $status == "True" ]]; then
              echo "::notice::Build completed successfully."
              exit 0
            elif [[ $status == "False" ]]; then
              echo "::error::Build failed."
              exit 1
            fi
          done

          sleep 15
        done
  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install-kubectl
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      - name: Get repository name
        run: echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d / -f 2)" >> $GITHUB_ENV
      - name: cleanup workload
        run: |
          dws(){
              for workload in $(kubectl -n ${{ env.WORKLOAD_NAMESPACE }} get workloads | grep -v NAME | cut -f1 -d ' ' | grep $1); do kubectl -n ${{ env.WORKLOAD_NAMESPACE }} delete workload/$workload --force; done
          }
          dws "${{ env.REPO_NAME }}-pr-${{ github.event.pull_request.number }}"
